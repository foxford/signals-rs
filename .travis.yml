language: rust
cache:
  directories:
    - ${HOME}/.cargo
    - ${TRAVIS_BUILD_DIR}/target
    - ${HOME}/google-cloud-sdk
sudo: false
git:
  depth: 1
notifications:
  email: false
jobs:
  fast_finish: true
  allow_failures:
    - rust: nightly
      env:
  include:
    - stage: commit
      rust: stable
      if: branch != master OR type != push
    - stage: commit
      rust: nightly
    - stage: commit
      rust: nightly
      env: RUSTFMT=1
      before_script: rustup component add rustfmt-preview
      script: cargo fmt -- --write-mode=diff
    - stage: commit
      rust: nightly
      before_script: cargo install clippy --debug --force
      script: cargo clippy
    - stage: docker build/publish
      rust: stable
      sudo: required
      services: docker
      script: DOCKER_IMAGE_NAME=signals-rs ./scripts/docker.image.publish.sh
    - stage: migrate
      rust: stable
      before_script: cargo install diesel_cli
      script: diesel migration run
    - stage: release
      rust: stable
      env:
        - NAMESPACE=staging APP=signals
      script:
        - |
          ./scripts/gcloud.install.sh &&
          ./scripts/k8s.install.sh &&
          PATH_TO_FILE=${TRAVIS_BUILD_DIR}/k8s ./scripts/k8s.chart.download.sh &&
          PATH_TO_CHARTS=${TRAVIS_BUILD_DIR}/k8s ./scripts/k8s.charts.apply.sh
    - stage: publish
      rust: stable
      before_script:
        - cargo install mdbook || true
      after_success:
        - |
          ./scripts/gcloud.install.sh &&
          mdbook build docs/ --dest-dir site/book/ &&
          cargo doc --no-deps &&
          mv target/doc docs/site/rustdoc &&
          gsutil -m rm -rf gs://signals-rs.docs.netology-group.services/* &&
          gsutil -m mv -ra public-read docs/site/* gs://signals-rs.docs.netology-group.services &&
          rm -rf docs/site/book docs/site/rustdoc
  script:
    - cargo test
    - cargo build
stages:
  - name: warmup
  - name: commit
  - name: docker build/publish
    if: branch = master AND type = push
  - name: test
  - name: migrate
    if: branch = master AND type = push AND env(DATABASE_URL) IS present
  - name: release
    if: branch = master AND type = push
  - name: publish
    if: branch = master AND type = push
